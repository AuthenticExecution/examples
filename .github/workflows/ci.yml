name: Tests
on:
  push:
    branches:
      - master
      - main
  schedule:
    - cron: '0 0 * * 1' # Every week on Monday
  workflow_dispatch: # Allow manual triggering

env:
  ADMIN_IMAGE: authexec/reactive-tools:latest
  DOCKER_COMPOSE_NAME: ci_github_runner__

jobs:
  test-examples:
    runs-on: self-hosted
    steps:
    -
      uses: actions/checkout@master
    -
      name: Pull images
      run: |
        make update_images
    -
      name: Get credentials
      run : |
        make credentials
        cp /home/gianluca/settings.json cred/
    - 
      name: button-led (build only)
      timeout-minutes: 10
      run: |
        cd button-led
        shopt -s expand_aliases
        alias REACTIVE_TOOLS="docker run --rm --name ${{ env.DOCKER_COMPOSE_NAME }} --network=host -v $(pwd):/usr/src/app/ ${{ env.ADMIN_IMAGE }} reactive-tools"
        REACTIVE_TOOLS --debug build descriptor-local.json
        unalias REACTIVE_TOOLS
        touch completed
    -
      name: button-led-no-sancus with AM
      timeout-minutes: 10
      run: |
        cd button-led-no-sancus
        cp -r ../cred .
        shopt -s expand_aliases
        ADMIN_CONTAINER=${{ env.DOCKER_COMPOSE_NAME }}-admin-1
        alias ADMIN="docker exec $ADMIN_CONTAINER"
        docker compose -p ${{ env.DOCKER_COMPOSE_NAME }} up -d
        echo "Waiting until deployment is complete.."
        until docker logs $ADMIN_CONTAINER 2> /dev/null | grep 'Setup complete' ; do sleep 1; done
        ADMIN make init
        sleep 2
        [ $(ADMIN make request) -eq 0 ]
        ADMIN make press
        sleep 2
        [ $(ADMIN make request) -eq 1 ]
        ADMIN make press
        sleep 2
        [ $(ADMIN make request) -eq 2 ]
        docker compose -p ${{ env.DOCKER_COMPOSE_NAME }} down
        unalias ADMIN
        touch completed
    -
      name: db-webserver without AM
      timeout-minutes: 10
      run: |
        cd db-webserver
        cp -r ../cred .
        shopt -s expand_aliases
        ADMIN_CONTAINER=${{ env.DOCKER_COMPOSE_NAME }}-admin-1
        alias ADMIN="docker exec $ADMIN_CONTAINER"
        docker compose -p ${{ env.DOCKER_COMPOSE_NAME }} up -d
        echo "Waiting until deployment is complete.."
        until docker logs $ADMIN_CONTAINER 2> /dev/null | grep 'Setup complete' ; do sleep 1; done
        ADMIN make init
        sleep 2
        [ $(ADMIN make request) -eq 0 ]
        sleep 2
        [ $(ADMIN make request) -eq 1 ]
        sleep 2
        [ $(ADMIN make request) -eq 2 ]
        docker compose -p ${{ env.DOCKER_COMPOSE_NAME }} down
        unalias ADMIN
        touch completed
    -
      name: module-update-no-sancus
      timeout-minutes: 10
      run: |
        cd module-update-no-sancus
        cp -r ../cred .
        docker compose -p ${{ env.DOCKER_COMPOSE_NAME }} up --abort-on-container-exit --exit-code-from admin
        docker compose -p ${{ env.DOCKER_COMPOSE_NAME }} down
        touch completed
    -
      name: state-transfer
      timeout-minutes: 10
      run: |
        cd state-transfer
        cp -r ../cred .
        docker compose -p ${{ env.DOCKER_COMPOSE_NAME }} up --abort-on-container-exit --exit-code-from admin
        docker compose -p ${{ env.DOCKER_COMPOSE_NAME }} down
        touch completed
    -
      name: Print logs if failure
      if: ${{ failure() }}
      run: |
        if ! find button-led/completed; then 
          echo "There are no additional logs for the button-led test."
        elif ! find button-led-no-sancus/completed; then 
          docker compose -p ${{ env.DOCKER_COMPOSE_NAME }} -f button-led-no-sancus/docker-compose.yml logs
        elif ! find db-webserver/completed; then 
          docker compose -p ${{ env.DOCKER_COMPOSE_NAME }} -f db-webserver/docker-compose.yml logs
        fi
    -
      name: Cleanup
      if: ${{ always() }}
      run: |
        shopt -s expand_aliases
        alias ADMIN="docker run --rm -v $(pwd)/:/usr/src/app/ ${{ env.ADMIN_IMAGE }}"
        ADMIN make clean
        unalias ADMIN
        CONTAINERS=$(docker ps -a -q --filter name=${{ env.DOCKER_COMPOSE_NAME }})
        NETWORKS=$(docker network ls -q --filter name=${{ env.DOCKER_COMPOSE_NAME }})
        docker kill $CONTAINERS || true
        docker rm $CONTAINERS || true
        docker network rm $NETWORKS || true